{
  "lec1": [
    {
      "id": 1,
      "question": "Write a program that asks the user to enter their first name and their father's name, then prints the full name.",
      "defaultCode": "a = input(\"First name: \")\nb = input(\"Second name: \")\nprint(a + \" \" + b)",
      "output": "First name: Shehab\nSecond name: Ahmed\nfullname: Shehab Ahmed"
    },
    {
      "id": 2,
      "question": "Write a program that prints a welcome message using a variable named `name`.",
      "defaultCode": "name = \"Sara\"\nprint(\"Hello\", name)",
      "output": "Hello Sara"
    },
    {
      "id": 3,
      "question": "Write a program that stores your favorite color in a variable, then prints it.",
      "defaultCode": "favorite_color = \"blue\"\nprint(\"My favorite color is\", favorite_color)",
      "output": "My favorite color is blue"
    },
    {
      "id": 4,
      "question": "🎥 Create a YouTube channel idea:\n\n➡️ Ask the user to enter their name and the topic of their channel, then display a formatted message showing the channel idea.",
      "defaultCode": "print(\"🎬 Let’s build your YouTube channel idea!\\n\")\n\nname = input(\"Enter your name: \")\nabout = input(\"What is your channel about? \")\n\nchannel_info = f\"\"\"\n############################\n🎥 YOUTUBE CHANNEL PROFILE\n############################\nCreator Name: {name}\nChannel Topic: {about}\n\n✅ Suggested Channel Name: '{about} with {name}'\n############################\n\"\"\"\n\nprint(channel_info)",
      "output": "🎬 Let’s build your YouTube channel idea!\nEnter your name: Sara\nWhat is your channel about? Tech Reviews\n\n############################\n🎥 YOUTUBE CHANNEL PROFILE\n############################\nCreator Name: Sara\nChannel Topic: Tech Reviews\n\n✅ Suggested Channel Name: 'Tech Reviews with Sara'\n############################"
    },
    {
      "id": 5,
      "question": "📋 Create your personal profile:\n\n➡️ Ask the user to enter their full name, city, and favorite programming language. Then display a formatted profile containing these details.",
      "defaultCode": "print(\"👤 Build your personal profile now!\\n\")\n\nname = input(\"Full name: \")\ncity = input(\"Your city: \")\nfav_lang = input(\"Favorite programming language: \")\n\nprofile = f\"\"\"\n===========================\n👤 USER PROFILE\n===========================\nName: {name}\nCity: {city}\nFavorite Language: {fav_lang}\nName Length: {len(name)} characters\n===========================\n\"\"\"\n\nprint(profile)",
      "output": "👤 Build your personal profile now!\nFull name: Ali\nYour city: Cairo\nFavorite programming language: Python\n\n===========================\n👤 USER PROFILE\n===========================\nName: Ali\nCity: Cairo\nFavorite Language: Python\nName Length: 3 characters\n==========================="
    }
  ],
  "lec3": [
    {
      "id": 1,
      "question": "🎸 **Banjo Playing Group Checker**\n\nWrite a program that checks if a person belongs to the 'banjo playing group' based on the first letter of their name.\n\n**Rules:**\n- If the name starts with `R` or `r`, they play banjo.\n- Otherwise, they do not.\n\n**Input:**\n- A string (person's name).\n\n**Output:**\n- `<name> plays banjo` OR `<name> does not play banjo`",
      "defaultCode": "name = input(\"Enter your name: \")\n\nif name.startswith('R') or name.startswith('r'):\n    print(name + \" plays banjo\")\nelse:\n    print(name + \" does not play banjo\")",
      "output": "Enter your name: Rami\nRami plays banjo"
    },
    {
      "id": 2,
      "question": "✅ **Boolean Value Checker**\n\nWrite a program that asks the user to enter a boolean value (`true` or `false`).\n- If the value is `true`, print `Yes`.\n- Otherwise, print `No`.\n\n**Input:**\n- A boolean value in text format (`true` or `false`).\n\n**Output:**\n- `Yes` OR `No`",
      "defaultCode": "value = input(\"Enter a boolean value (true/false): \").lower()\n\nif value == 'true':\n    print(\"Yes\")\nelse:\n    print(\"No\")",
      "output": "Enter a boolean value (true/false): true\nYes"
    },
    {
      "id": 3,
      "question": "💰 **Bill Splitter**\n\nWrite a program that calculates how much each person should pay when splitting a bill.\n\n**Rules:**\n- Ask for the total bill amount.\n- Ask for the number of people.\n- Divide and round to 2 decimal places.\n- If people count is 0 → print `Number of people cannot be zero.`\n\n**Input:**\n- A float (bill amount).\n- An integer (people count).\n\n**Output:**\n- `Each person should pay: X.XX` OR error message.",
      "defaultCode": "total_bill = float(input(\"Enter the total bill amount: \"))\npeople_count = int(input(\"Enter the number of people: \"))\n\nif people_count == 0:\n    print(\"Number of people cannot be zero.\")\nelse:\n    amount_per_person = total_bill / people_count\n    print(f\"Each person should pay: {amount_per_person:.2f}\")",
      "output": "Enter the total bill amount: 120\nEnter the number of people: 4\nEach person should pay: 30.00"
    },
    {
      "id": 4,
      "question": "🔐 **Password Strength Checker**\n\nWrite a program that checks if a password is strong.\n\n**Rules:**\n- Password length must be > 12.\n- Password must contain the word `code`.\n\n**Input:**\n- A string (password).\n\n**Output:**\n- `Strong password` OR `Weak password`",
      "defaultCode": "password = input(\"Enter your password: \")\n\nif len(password) > 12 and \"code\" in password:\n    print(\"Strong password\")\nelse:\n    print(\"Weak password\")",
      "output": "Enter your password: #codeJourney1#\nStrong password"
    },
    {
      "id": 5,
      "question": "🔤 **Word Analyzer**\n\nWrite a program that asks the user for a word, then displays:\n- Number of characters.\n- First letter.\n- Last letter.\n\n**Input:**\n- A string (word).\n\n**Output:**\n- Word length.\n- First character.\n- Last character.",
      "defaultCode": "word = input(\"Enter a word: \")\nlength = len(word)\nfirst_letter = word[0]\nlast_letter = word[-1]\nprint(f\"The word has {length} characters.\")\nprint(f\"First letter: {first_letter}\")\nprint(f\"Last letter: {last_letter}\")",
      "output": "Enter a word: Python\nThe word has 6 characters.\nFirst letter: P\nLast letter: n"
    },
    {
      "id": 6,
      "question": "📊 **Study Statistics Tracker**\n\nWrite a program that calculates total weekly study hours and prints a formatted report.\n\n**Steps:**\n1. Ask for name.\n2. Ask for daily study hours.\n3. Ask for study days per week.\n4. Calculate total weekly hours.\n5. Print a report.\n\n**Input:**\n- String (name).\n- Integer (hours per day).\n- Integer (days per week).\n\n**Output:**\n- Formatted study report.",
      "defaultCode": "print(\"📚 Let’s track your study habits!\\n\")\n\nname = input(\"What’s your name? \")\nhours_per_day = int(input(\"How many hours do you study each day? \"))\ndays_per_week = int(input(\"How many days do you study per week? \"))\n\ntotal_hours = hours_per_day * days_per_week\n\nreport = f\"\"\"\n===========================\n📊 STUDY REPORT\n===========================\nName: {name}\nDaily Study Hours: {hours_per_day}\nStudy Days/Week: {days_per_week}\nTotal Weekly Study Hours: {total_hours}\n===========================\n\"\"\"\n\nprint(report)",
      "output": "📚 Let’s track your study habits!\nWhat’s your name? Omar\nHow many hours do you study each day? 3\nHow many days do you study per week? 5\n\n===========================\n📊 STUDY REPORT\n===========================\nName: Omar\nDaily Study Hours: 3\nStudy Days/Week: 5\nTotal Weekly Study Hours: 15\n==========================="
    },
    {
      "id": 7,
      "question": "📆 **Project Duration & Cost Calculator**\n\nWrite a program that calculates project duration in weeks/days and total cost.\n\n**Steps:**\n1. Enter project start day.\n2. Enter project end day.\n3. Enter daily work cost.\n4. Calculate duration and cost.\n\n**Input:**\n- Integer (start day).\n- Integer (end day).\n- Float (daily cost).\n\n**Output:**\n- Weeks and days.\n- Total project cost.",
      "defaultCode": "print(\"=== Project Duration Calculator ===\")\n\nstart_day = int(input(\"Enter start day (1-31): \"))\nend_day = int(input(\"Enter end day (1-31): \"))\ndaily_cost = float(input(\"Enter daily cost: \"))\n\ndays = end_day - start_day\nweeks = days // 7\nremaining_days = days % 7\ntotal_cost = days * daily_cost\n\nprint(f\"\\nProject took {weeks} weeks and {remaining_days} days.\")\nprint(f\"Total cost: ${total_cost:.2f}\")",
      "output": "=== Project Duration Calculator ===\nEnter start day (1-31): 3\nEnter end day (1-31): 17\nEnter daily cost: 50\n\nProject took 2 weeks and 0 days.\nTotal cost: $700.00"
    },
    {
      "id": 8,
      "question": "🧠 **Mini Quiz Game**\n\nWrite a program that asks the user 3 questions and calculates the score.\n\n**Rules:**\n- Each correct answer = +1 score.\n- Display final score and message based on performance.\n\n**Input:**\n- Answers to 3 quiz questions.\n\n**Output:**\n- Score and emoji-based message.",
      "defaultCode": "score = 0\n\nprint(\"🧠 Welcome to the Smart Check!\\nAnswer these questions:\")\n\nq1 = input(\"1. What color is the sky on a clear day? \").lower()\nif q1 == \"blue\":\n    score += 1\n\nq2 = input(\"2. How many legs does a spider have? \")\nif q2 == \"8\":\n    score += 1\n\nq3 = input(\"3. What’s 5 * 3? \")\nif q3 == \"15\":\n    score += 1\n\nprint(f\"\\n🎓 Your score: {score}/3\")\n\nif score == 3:\n    print(\"🏆 Genius! You're amazing!\")\nelif score == 2:\n    print(\"👍 Good job! Almost perfect.\")\nelif score == 1:\n    print(\"🙂 Not bad! Try again.\")\nelse:\n    print(\"😅 Oops... better luck next time.\")",
      "output": "🧠 Welcome to the Smart Check!\nAnswer these questions:\n1. What color is the sky on a clear day? blue\n2. How many legs does a spider have? 8\n3. What’s 5 * 3? 15\n\n🎓 Your score: 3/3\n🏆 Genius! You're amazing!"
    },
    {
      "id": 9,
      "question": "🧭 **Mystery Forest Adventure**\n\nYou will create a **text-based game** where the player must choose the right path to escape the forest.\n\n📜 **Story:**\n- The player is lost in a mysterious forest and must choose between two paths.\n- Depending on their choices, they will either **win** or **lose**.\n\n🔀 **Choices:**\n1. If the player chooses **left**:\n   - They find a small cabin 🏡.\n     - If they choose **enter** (go inside) ⇒ **WIN 🎉**\n     - If they choose **keep walking** ⇒ **LOSE 😢**\n2. If the player chooses **right**:\n   - They reach a broken bridge 🌉.\n     - If they choose **cross** ⇒ **LOSE 🐊**\n     - If they choose **way** (find another way) ⇒ **WIN 🚁**\n3. Any other input at any step ⇒ **LOSE 🌙**\n\n💡 **Task:**\n- Ask the user for their first choice (`left` or `right`).\n- Based on that choice, ask a second question related to the situation.\n- Print the story step-by-step and the final result (win or lose).\n\n📥 **Input:**\n- First input: `left` or `right`.\n- Second input: depends on the chosen path.\n\n📤 **Output:**\n- Story events as they happen.\n- The final game result.",
      "defaultCode": "print(\"🌲 Welcome to Mystery Forest Adventure!\\n\")\nprint(\"You find yourself lost in a mysterious forest... 🧭\")\n\nchoice1 = input(\n    \"You see two paths. Do you go 'left' or 'right'? ➡️  : \").lower()\nif choice1 == \"left\":\n  print(\"\\nYou walk along a quiet trail and find a small cabin. 🏡\")\n  choice2 = input(\n      \"\\nDo you 'enter' the cabin or 'keep walking'? 🏃‍♂️  : \").lower()\n  if choice2 == \"enter\":\n    print(\"\\nInside, you find a map and a flashlight! 🗺️🔦\")\n    print(\"\\nYou follow the map and safely escape the forest. 🎉 YOU WIN!\")\n  else:\n    print(\n        \"\\nYou keep walking but get lost deeper in the forest... 😢 GAME OVER\")\nelif choice1 == \"right\":\n  print(\"\\nYou reach a river with a rickety bridge. 🌉\")\n  choice3 = input(\n      \"\\nDo you try to 'cross' or look for another 'way'? 🤔  : \").lower()\n  if choice3 == \"cross\":\n    print(\"\\nThe bridge breaks! You fall into the water... 🐊 GAME OVER\")\n  else:\n    print(\"\\nYou find a shallow spot and cross safely. 🏞️\")\n    print(\"\\nOn the other side, you see a rescue team. 🚁 YOU WIN!\")\nelse:\n  print(\n      \"\\nYou hesitate too long and night falls... 🌙 You’re stuck forever. GAME OVER\"\n  )",
      "output": "🌲 Welcome to Mystery Forest Adventure!\nYou find yourself lost in a mysterious forest... 🧭\nYou see two paths. Do you go 'left' or 'right'? ➡️  : left\n\nYou walk along a quiet trail and find a small cabin. 🏡\n\nDo you 'enter' the cabin or 'keep walking'? 🏃‍♂️  : enter\n\nInside, you find a map and a flashlight! 🗺️🔦\n\nYou follow the map and safely escape the forest. 🎉 YOU WIN!"
    }
  ],
  "lec4": [
    {
      "id": 1,
      "question": "🎲 **Random Number in Range**\n\nYour task is to write a program that asks the user for two integers representing a range (inclusive). Then generate and print a random number between them using `random.randint()`.\n\n**Input:**\n- Two integers (start and end).\n\n**Output:**\n- A random integer between the given numbers (inclusive).\n\n**Example:**\n```\nInput:\n5\n10\nOutput:\n7\n```",
      "defaultCode": "import random\n\nstart = int(input(\"Enter the first number: \"))\nend = int(input(\"Enter the second number: \"))\n\nprint(random.randint(start, end))",
      "output": "Enter the first number: 5\nEnter the second number: 10\n7"
    },
    {
      "id": 2,
      "question": "🛠 **Comprehensive List Operations**\n\nCreate a Python program that demonstrates several common list operations in a connected scenario:\n\n1. Start with a list of numbers: `[3, 1, 2]`.\n2. Append the number **4** to the end of the list using `.append()`.\n3. Insert the number **10** at index **1** using `.insert()`.\n4. Remove the number **3** from the list using `.remove()`.\n5. Remove the last element from the list using `.pop()`.\n6. Sort the list in ascending order using `.sort()`.\n7. Reverse the list order using `.reverse()`.\n8. Find the index of the number **2** using `.index()`.\n9. Count how many times the number **1** appears using `.count()`.\n\nAfter each operation, print the list (or the result where appropriate).\n\n**Input:**\n- No input from the user (use the given numbers for demonstration).\n\n**Output:**\n- Show the list after each operation, plus the results of `.index()` and `.count()`.\n\n**Example Output:**\n```\nInitial list: [3, 1, 2]\nAfter append 4: [3, 1, 2, 4]\nAfter insert 10 at index 1: [3, 10, 1, 2, 4]\nAfter remove 3: [10, 1, 2, 4]\nAfter pop last element: [10, 1, 2]\nAfter sort ascending: [1, 2, 10]\nAfter reverse order: [10, 2, 1]\nIndex of 2: 1\nCount of 1: 1\n```",
      "defaultCode": "nums = [3, 1, 2]\nprint('Initial list:', nums)\n\nnums.append(4)\nprint('After append 4:', nums)\n\nnums.insert(1, 10)\nprint('After insert 10 at index 1:', nums)\n\nnums.remove(3)\nprint('After remove 3:', nums)\n\nnums.pop()\nprint('After pop last element:', nums)\n\nnums.sort()\nprint('After sort ascending:', nums)\n\nnums.reverse()\nprint('After reverse order:', nums)\n\nprint('Index of 2:', nums.index(2))\nprint('Count of 1:', nums.count(1))",
      "output": "Initial list: [3, 1, 2]\nAfter append 4: [3, 1, 2, 4]\nAfter insert 10 at index 1: [3, 10, 1, 2, 4]\nAfter remove 3: [10, 1, 2, 4]\nAfter pop last element: [10, 1, 2]\nAfter sort ascending: [1, 2, 10]\nAfter reverse order: [10, 2, 1]\nIndex of 2: 1\nCount of 1: 1"
    },
    {
      "id": 3,
      "question": "🎯 **Random Winner Selector**\n\nWrite a program that asks the user to enter several names separated by commas. Then randomly select one of the names as the winner using `random.choice()`.\n\n**Input:**\n- A string containing names separated by commas.\n\n**Output:**\n- A string: `The winner is: <name>`.\n\n**Example:**\n```\nInput:\nAhmed,Mona,Sara\nOutput:\nThe winner is: Mona\n```",
      "defaultCode": "import random\n\nnames = input(\"Enter names separated by commas: \").split(',')\nwinner = random.choice(names)\nprint(\"The winner is:\", winner)",
      "output": "Enter names separated by commas: Ahmed,Mona,Sara\nThe winner is: Mona"
    },
    {
      "id": 4,

      "question": "🔄 **Shuffle Word Letters**\n\nWrite a program that asks the user for a single word, then randomly shuffles its letters using `random.shuffle()`.\n\n**Input:**\n- A single word.\n\n**Output:**\n- The same letters but in a random order.\n\n**Example:**\n```\nInput:\nPython\nOutput:\nnothPy\n```",
      "defaultCode": "import random\n\nword = list(input(\"Enter a word: \"))\nrandom.shuffle(word)\nprint(''.join(word))",
      "output": "Enter a word: Python\nnothPy"
    },

    {
      "id": 5,
      "question": "📐 **Square Root Calculator**\n\nWrite a program that asks the user for a number, then calculates and prints its square root using `math.sqrt()`.\n\n**Input:**\n- A float or integer.\n\n**Output:**\n- The square root of the number.\n\n**Example:**\n```\nInput:\n16\nOutput:\n4.0\n```",
      "defaultCode": "import math\n\nnum = float(input(\"Enter a number: \"))\nprint(\"Square root:\", math.sqrt(num))",
      "output": "Enter a number: 16\nSquare root: 4.0"
    },
    {
      "id": 6,
      "question": "👥 **First and Last Friend**\n\nCreate a list containing 3 friends' names, then print:\n1. The first friend in the list.\n2. The last friend in the list.\n\n**Input:**\n- No input from the user.\n\n**Output:**\n- First and last names from the list.\n\n**Example:**\n```\nOutput:\nAhmed\nSara\n```",
      "defaultCode": "friends = ['Ahmed', 'Mona', 'Sara']\nprint(friends[0])\nprint(friends[-1])",
      "output": "Ahmed\nSara"
    },
    {
      "id": 7,
      "question": "🔐 **Simple Random Password**\n\nCreate a program that generates a password containing **6 random English letters** (both uppercase and lowercase) using `string.ascii_letters` and `random.choice()`.\n\n**Input:**\n- No input required from the user.\n\n**Output:**\n- A string of 6 random letters.\n\n**Example:**\n```\nOutput:\naZbYcD\n```",
      "defaultCode": "import random\nimport string\n\npassword = ''.join(random.choice(string.ascii_letters) for _ in range(6))\nprint(password)",
      "output": "aZbYcD"
    },
    {
      "id": 8,
      "question": "💪 **Strong Random Password**\n\nWrite a program that asks the user for the length of a password, then generates a strong password containing:\n- Uppercase letters\n- Lowercase letters\n- Numbers\n- Special characters\n\n**Input:**\n- An integer representing password length.\n\n**Output:**\n- A random password of the given length.\n\n**Example:**\n```\nInput:\n6\nOutput:\nA7@c!P\n```",
      "defaultCode": "import random\nimport string\n\nlength = int(input(\"Enter password length: \"))\nchars = string.ascii_letters + string.digits + string.punctuation\npassword = ''.join(random.choice(chars) for _ in range(length))\nprint(password)",
      "output": "A7@c!P"
    },
    {
      "id": 9,
      "question": "👥 **Friends Manager**\n\nYour task is to write a program that:\n1. Asks the user to enter a list of friends' names separated by commas.\n2. Adds a new friend to the list.\n3. Removes a friend from the list.\n4. Edits a friend's name by index.\n5. Prints the final list joined with `-`.\n6. Picks a random friend using `random.choice()`.\n\n**Input:**\n- A comma-separated list of names.\n- A new friend's name.\n- A friend's name to remove.\n- An index and a new name.\n\n**Output:**\n- Updated friends list.\n- A random friend from the list.\n\n**Example:**\n```\nInput:\nAli,Omar,Mona,Sara\nYoussef\nMona\n0\nAhmed\n\nOutput:\n📋 Your friends list: ['Ali', 'Omar', 'Mona', 'Sara']\n➕ After adding: ['Ali', 'Omar', 'Mona', 'Sara', 'Youssef']\n🗑 After removing: ['Ali', 'Omar', 'Sara', 'Youssef']\n✏️ After editing: ['Ahmed', 'Omar', 'Sara', 'Youssef']\n📝 Final friends list: Ahmed - Omar - Sara - Youssef\n🎲 Random friend: Omar\n```",
      "defaultCode": "import random\n\n# 1- Input friends\nfriends_input = input(\"Enter your friends separated by commas: \")\nfriends = friends_input.split(\",\")\nprint(\"\\n📋 Your friends list:\", friends)\n\n# 2- Add new friend\nnew_friend = input(\"\\nEnter a new friend to add: \")\nfriends.append(new_friend)\nprint(\"➕ After adding:\", friends)\n\n# 3- Remove a friend\nremove_friend = input(\"\\nEnter a friend to remove: \")\nif remove_friend in friends:\n    friends.remove(remove_friend)\n    print(\"🗑 After removing:\", friends)\nelse:\n    print(\"⚠ Friend not found!\")\n\n# 4- Edit a friend\nindex = int(input(\"\\nEnter the index to edit (starting from 0): \"))\nif 0 <= index < len(friends):\n    new_name = input(\"Enter the new name: \")\n    friends[index] = new_name\n    print(\"✏️ After editing:\", friends)\nelse:\n    print(\"⚠ Invalid index!\")\n\n# 5- Show list joined\nprint(\"\\n📝 Final friends list:\", \" - \".join(friends))\n\n# 6- Pick random friend\nchosen = random.choice(friends)\nprint(\"🎲 Random friend:\", chosen)",
      "output": "Enter your friends separated by commas: Ali,Omar,Mona,Sara\n\n📋 Your friends list: ['Ali', 'Omar', 'Mona', 'Sara']\n\nEnter a new friend to add: Youssef\n➕ After adding: ['Ali', 'Omar', 'Mona', 'Sara', 'Youssef']\n\nEnter a friend to remove: Mona\n🗑 After removing: ['Ali', 'Omar', 'Sara', 'Youssef']\n\nEnter the index to edit (starting from 0): 0\nEnter the new name: Ahmed\n✏️ After editing: ['Ahmed', 'Omar', 'Sara', 'Youssef']\n\n📝 Final friends list: Ahmed - Omar - Sara - Youssef\n🎲 Random friend: Omar"
    }
  ]
}
